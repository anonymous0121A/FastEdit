import argparse

def ParseArgs():
	parser = argparse.ArgumentParser(description='Model Params')
	parser.add_argument('--lr', default=2e-4, type=float, help='learning rate')
	parser.add_argument('--batch', default=512, type=int, help='batch size')
	parser.add_argument('--tst_bat', default=256, type=int, help='number of users in a testing batch')
	parser.add_argument('--reg', default=1e-7, type=float, help='weight decay regularizer')
	parser.add_argument('--epoch', default=100, type=int, help='number of epochs')
	parser.add_argument('--mask_bat', default=128, type=int, help='batch size for masking')
	parser.add_argument('--niter', default=2, type=int, help='number of iteration in svd')
	parser.add_argument('--decay', default=1.0, type=float, help='weight decay rate')
	parser.add_argument('--save_path', default='tem', help='file name to save model and training record')
	parser.add_argument('--latdim', default=128, type=int, help='embedding size')
	parser.add_argument('--anchor', default=128, type=int, help='number of anchor nodes in the compressed graph transformer')
	parser.add_argument('--head', default=4, type=int, help='number of attention head')
	parser.add_argument('--gnn_layer', default=3, type=int, help='number of gnn layers')
	parser.add_argument('--early_stop', default=10, type=int, help='number of epochs for early stop')
	parser.add_argument('--layer_mlp', default=2, type=int, help='number of feed-forward layers')
	parser.add_argument('--load_model', default=None, help='model name to load')
	parser.add_argument('--topk', default=20, type=int, help='K of top K')
	parser.add_argument('--keep_rate', default=0.5, type=float, help='ratio of edges to keep')
	parser.add_argument('--data', default='ml1m', type=str, help='name of dataset')
	parser.add_argument('--tst_epoch', default=1, type=int, help='number of epoch to test while training')
	parser.add_argument('--gpu', default='0', type=str, help='indicates which gpu to use')
	parser.add_argument('--act', default='leaky', type=str, help='activation function')
	parser.add_argument('--leaky', default=0.5, type=float, help='slope for the negative part of leaky relu')
	parser.add_argument('--unlearn_rate', default=0.05, type=float, help='ratio of data to unlearn')
	parser.add_argument('--finetune_steps', default=50, type=int, help='number of steps to fine-tune')
	parser.add_argument('--mask', default='trn', type=str, help='indicating which mask strategy to apply', choices=['trn', 'none', 'random'])
	parser.add_argument('--symetric', default=0, type=int, help='indicating lightgcn to be symmetric or not for user/item-side')
	parser.add_argument('--concat', default=0, type=int, help='indicating concat untrained lightgcn embedddings or not')
	parser.add_argument('--ini_embed', default='svd', type=str, help='which kind of initial embedding projection to use', choices=['svd', 'uniform'])
	return parser.parse_args()
args = ParseArgs()
